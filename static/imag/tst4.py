import io
import base64
from PIL import Image

s = ""
imgdata = base64.b64decode(s)
img = Image.open(io.BytesIO(imgdata))

width, height = img.size
print (width, height)

im1 = img.crop((50, 20, 150, 100))

img.save("/tmp/out1.jpg")
im1.save("/tmp/out2.jpg")

im_rotate = img.rotate(90)
im_rotate.save("/tmp/out3.jpg")

with open("/tmp/out3.jpg", "rb") as image_file:
    es = base64.b64encode(image_file.read())
    print (str(es,'utf-8'))
